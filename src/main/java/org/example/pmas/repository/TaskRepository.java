package org.example.pmas.repository;

import org.example.pmas.exception.ConnectionException;
import org.example.pmas.model.Task;
import org.example.pmas.model.User;
import org.example.pmas.model.rowMapper.TaskRowMapper;
import org.example.pmas.repository.Interfaces.ITaskRepository;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;

import java.sql.PreparedStatement;

import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import java.sql.Statement;
import java.util.List;

@Repository
public class TaskRepository implements ITaskRepository {
    private final JdbcTemplate jdbcTemplate;


    public TaskRepository(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public Task create(Task task) {
        String sql = "INSERT INTO tasks (name, description, timeBudget, timeTaken, completed, deadline, subprojectID) " +
                "VALUES (?, ?, ?, ?, ?, ?, ?)";

        // Object for id
        KeyHolder keyHolder = new GeneratedKeyHolder();
        jdbcTemplate.update(connection -> {
            PreparedStatement ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            ps.setString(1, task.getName());
            ps.setString(2, task.getDescription());
            ps.setDouble(3, task.getTimeBudget());
            ps.setDouble(4, task.getTimeTaken());
            ps.setBoolean(5, task.isCompleted());
            ps.setObject(6, task.getDeadline());
            ps.setInt(7, task.getSubProject().getId());
            return ps;
        }, keyHolder);

        // Collects autogenerated id from database if any
        Number key = keyHolder.getKey();
        // If no id created
        if (key == null)
            return null;

        // Insert id
        task.setId(key.intValue());

        // If user exists. Add user task relation to junction table
        // Doesn't add automatic
        if (task.getUsers() != null) {
            for (User user : task.getUsers()) {
                jdbcTemplate.update("INSERT INTO usertasks (userid, taskid) " +
                                "VALUES (?, ?)",
                        user.getUserID(), task.getId());
            }
        }
        return task;
    }


    @Override
    public List<Task> readAll() throws ConnectionException {
        String sql =
                "SELECT " +
                        "t.*, " +
                        "GROUP_CONCAT(u.id) AS user_ids, " +
                        "GROUP_CONCAT(u.name) AS user_names " +
                        "FROM tasks t " +
                        "LEFT JOIN usertasks ut ON t.id = ut.taskid " +
                        "LEFT JOIN users u ON ut.userid = u.id " +
                        "GROUP BY t.id, t.name, t.completed, t.description, t.timeBudget, t.timeTaken";

        return jdbcTemplate.query(sql, new TaskRowMapper());
    }

    @Override
    public Task readSelected(int id) throws ConnectionException {
        String sql = " SELECT " +
                "t.*, " +
                "sp.id as subproject_id, " +
                "sp.name as subproject_name, " +
                "GROUP_CONCAT(u.id) as user_ids, " +
                "GROUP_CONCAT(u.name) as user_names " +
                "FROM tasks t " +
                "LEFT JOIN usertasks ut ON t.id = ut.taskid " +
                "LEFT JOIN users u ON ut.userid = u.id " +
                "LEFT JOIN subprojects sp ON sp.id = t.id " +
                "WHERE t.id = ? " +
                "GROUP BY t.id, t.name, t.completed, t.description, t.timeBudget, t.timeTaken";

        List<Task> task = jdbcTemplate.query(sql, new TaskRowMapper(), id);
        return task.isEmpty()
                ? null
                : task.getFirst();
    }

    @Override
    public boolean delete(int id) {
        String sql = "DELETE FROM tasks WHERE id = ?";
        return jdbcTemplate.update(sql, id) > 0;
    }

    @Override
    public boolean update(Task newTask) {
        return false;
    }
}
