package org.example.pmas.repository;

import org.example.pmas.exception.ConnectionException;
import org.example.pmas.model.Task;
import org.example.pmas.model.rowMapper.TaskRowMapper;
import org.example.pmas.repository.Interfaces.ITaskRepository;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;

import java.sql.PreparedStatement;

import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.sql.Statement;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

@Repository
public class TaskRepository implements ITaskRepository {
    private final JdbcTemplate jdbcTemplate;


    public TaskRepository(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Transactional
    @Override
    public Task create(Task task) {
        String sql = "INSERT INTO tasks (name, description, timeBudget, timeTaken, completed, deadline, subprojectID) " +
                "VALUES (?, ?, ?, ?, ?, ?, ?)";

        // Object for id
        KeyHolder keyHolder = new GeneratedKeyHolder();
        jdbcTemplate.update(connection -> {
            PreparedStatement ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            ps.setString(1, task.getName());
            ps.setString(2, task.getDescription());
            ps.setDouble(3, task.getTimeBudget());
            ps.setDouble(4, task.getTimeTaken());
            ps.setBoolean(5, task.isCompleted());
            ps.setObject(6, task.getDeadline());
            ps.setInt(7, task.getSubProject().getId());
            return ps;
        }, keyHolder);

        // Collects autogenerated id from the database if any
        Number key = keyHolder.getKey();
        // If no id created
        if (key == null)
            return null;

        // Insert id
        task.setId(key.intValue());

        return task;
    }

    @Transactional
    @Override
    public List<Task> readAll() throws ConnectionException {
        String sql =
                "SELECT " +
                        "t.*, " +
                        "sp.id as subproject_id, " +
                        "sp.name as subproject_name, " +
                        "GROUP_CONCAT(u.id) AS user_ids, " +
                        "GROUP_CONCAT(u.name) AS user_names " +
                        "FROM tasks t " +
                        "LEFT JOIN usertasks ut ON t.id = ut.taskid " +
                        "LEFT JOIN users u ON ut.userid = u.id " +
                        "LEFT JOIN subprojects sp ON t.subprojectID = sp.id " +
                        "GROUP BY t.id";

        return jdbcTemplate.query(sql, new TaskRowMapper());
    }

    @Transactional
    @Override
    public Task readSelected(int id) throws ConnectionException {
        String sql = " SELECT " +
                "t.*, " +
                "sp.id as subproject_id, " +
                "sp.name as subproject_name, " +
                "GROUP_CONCAT(u.id) as user_ids, " +
                "GROUP_CONCAT(u.name) as user_names " +
                "FROM tasks t " +
                "LEFT JOIN usertasks ut ON t.id = ut.taskid " +
                "LEFT JOIN users u ON ut.userid = u.id " +
                "LEFT JOIN subprojects sp ON sp.id = t.id " +
                "WHERE t.id = ? " +
                "GROUP BY t.id";

        List<Task> task = jdbcTemplate.query(sql, new TaskRowMapper(), id);
        return task.isEmpty()
                ? null
                : task.getFirst();
    }

    @Transactional
    @Override
    public boolean delete(int id) {
        String sql = "DELETE FROM tasks WHERE id = ?";
        return jdbcTemplate.update(sql, id) > 0;
    }

    @Transactional
    @Override
    public boolean update(Task newObject) {
        String sql = "UPDATE tasks SET " +
                "name = ?, " +
                "description = ?, " +
                "timeBudget = ?, " +
                "timeTaken = ?, " +
                "completed = ?, " +
                "deadline = ?, " +
                "subprojectID = ? " +
                "WHERE id = ?";
        return jdbcTemplate.update(sql,
                newObject.getName(),
                newObject.getDescription(),
                newObject.getTimeBudget(),
                newObject.getTimeTaken(),
                newObject.isCompleted(),
                newObject.getDeadline(),
                newObject.getSubProject().getId(),
                newObject.getId()) > 0;
    }

    @Transactional
    @Override
    public boolean addUserToTask(int taskId, List<Integer> newUserIds) {
        // gets data from the junctiontable
        List<Integer> currentUserIds = jdbcTemplate.queryForList(
                "SELECT userid FROM usertasks WHERE taskid = ?",
                Integer.class,
                taskId
        );

        // if no users added it will throw and error.
        // this will avoid error
        if(newUserIds == null) newUserIds = Collections.emptyList();
        // Users to add
        Set<Integer> toAdd = new HashSet<>(newUserIds);
        toAdd.removeAll(currentUserIds);

        // if no users add it will throw and error.
        // this will avoid error
        if(currentUserIds.isEmpty()) currentUserIds = Collections.emptyList();
        // Users to remove
        Set<Integer> toRemove = new HashSet<>(currentUserIds);
        toRemove.removeAll(newUserIds);

        // Add users to the junction table
        for (var user : toAdd) {
            jdbcTemplate.update("INSERT INTO usertasks (userid, taskid) " +
                            "VALUES (?, ?) ",
                    user, taskId);
        }

        // Remove users from the junction table
        for (Integer userId : toRemove) {
            jdbcTemplate.update(
                    "DELETE FROM usertasks WHERE userid = ? AND taskid = ?",
                    userId, taskId
            );
        }

        return toAdd.isEmpty() && toRemove.isEmpty();
    }
}
