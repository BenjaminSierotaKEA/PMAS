package org.example.pmas.repository;

import org.example.pmas.model.User;

import org.example.pmas.model.UserRowMapper;
import org.example.pmas.repository.Interfaces.IUserRepository;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.sql.PreparedStatement;
import java.util.List;

@Repository
public class UserRepository implements IUserRepository {

    private final JdbcTemplate jdbcTemplate;


    public UserRepository(JdbcTemplate jdbcTemplate){
        this.jdbcTemplate=jdbcTemplate;
    }


    @Override
    @Transactional
    public User create(User newUser) throws DataAccessException {
        String sql = "INSERT INTO users (name, email, password, role) VALUES (?,?,?,?)";

        //fetches/stores the autogenerated key from the SQL DB
        KeyHolder keyHolder = new GeneratedKeyHolder();

        //updating the DB
        jdbcTemplate.update(connection -> {
            var ps = connection.prepareStatement(sql, new String[]{"id"}); //id is the generated column
            ps.setString(1, newUser.getName());
            ps.setString(2, newUser.getEmail());
            ps.setString(3, newUser.getPassword());
            ps.setObject(4, newUser.getRole());
            return ps;
        }, keyHolder);

        //checks for a generated key, and if it finds it, sets it to the user we return
        Number key = keyHolder.getKey();
        if(key != null){
            newUser.setUserID(key.intValue());
        }

        return newUser;
    }

    @Override
    @Transactional
    public List<User> readAll() throws DataAccessException {
        String sql = "SELECT * FROM users";
        return jdbcTemplate.query(sql,new UserRowMapper());
    }

    @Override
    public User readSelected(int id) throws DataAccessException {
        String sql = "SELECT * FROM users WHERE users.id = ?";

        return jdbcTemplate.queryForObject(sql, new UserRowMapper(), id);
    }

    @Override
    public boolean delete(int id) {
        String sql = "DELETE FROM users WHERE id = ?";
        return jdbcTemplate.update(sql, id) > 0;
    }

    @Override
    @Transactional
    public boolean update(User newUser) throws DataAccessException {

        String sql = "UPDATE users SET name = ?, email = ?, password = ?, role = ? WHERE id = ?";

        int rowsAffected = jdbcTemplate.update(sql,
                newUser.getName(),
                newUser.getEmail(),
                newUser.getPassword(),
                newUser.getRole().getId(),
                newUser.getUserID()
        );

        return rowsAffected > 0;
    }


    @Override
    @Transactional
    public User getByEmail(String email) throws DataAccessException {
        String sql = "SELECT * FROM users WHERE LOWER(email) = LOWER(?)";

        return jdbcTemplate.queryForObject(sql,
                new UserRowMapper(),
                email);
    }
}
