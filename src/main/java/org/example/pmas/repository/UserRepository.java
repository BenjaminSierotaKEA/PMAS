package org.example.pmas.repository;

import org.example.pmas.exception.DatabaseException;
import org.example.pmas.model.User;

import org.example.pmas.model.rowMapper.UserRowMapper;
import org.example.pmas.repository.Interfaces.IUserRepository;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Repository
public class UserRepository implements IUserRepository {

    private final JdbcTemplate jdbcTemplate;



    public UserRepository(JdbcTemplate jdbcTemplate){
        this.jdbcTemplate=jdbcTemplate;

    }


    @Override
    @Transactional
    public User create(User newUser) throws DatabaseException {
        String sql = "INSERT INTO users (name, email, password, role) VALUES (?,?,?,?)";

        //fetches/stores the autogenerated key from the SQL DB
        KeyHolder keyHolder = new GeneratedKeyHolder();

        //updating the DB
        jdbcTemplate.update(connection -> {
            var ps = connection.prepareStatement(sql, new String[]{"id"}); //id is the generated column
            ps.setString(1, newUser.getName());
            ps.setString(2, newUser.getEmail());
            ps.setString(3, newUser.getPassword());
            ps.setInt(4, newUser.getRole().getId());
            return ps;
        }, keyHolder);

        //checks for a generated key, and if it finds it, sets it to the user we return
        Number key = keyHolder.getKey();
        if(key != null){
            newUser.setUserID(key.intValue());
        }

        return newUser;
    }

    @Override
    @Transactional
    public List<User> readAll() throws DatabaseException {
        String sql = """
        SELECT u.*, r.id as role_id, r.name as role_name
        FROM users u
        JOIN roles r ON u.role = r.id
        """;
        return jdbcTemplate.query(sql,new UserRowMapper());
    }

    @Override
    public User readSelected(int id) throws DatabaseException {
        String sql = """
                    SELECT u.id, u.name, u.email, u.password, u.picture, 
                    r.id AS role_id, r.name AS role_name
                    FROM users u
                    JOIN roles r ON u.role = r.id
                    WHERE u.id = ?
                """;

        return jdbcTemplate.queryForObject(sql, new UserRowMapper(), id);
    }

    @Override
    public List<User> getAllOnProject(int projectID){
        String sql = "SELECT u.*, r.id as role_id, r.name as role_name" +
                "        FROM users u" +
                "        JOIN roles r ON u.role = r.id" +
                " JOIN userprojects up ON u.id = up.userid" +
                " WHERE up.projectid = ?";

        return jdbcTemplate.query(sql, new UserRowMapper(), projectID);
    }

    @Override
    public List<User> getAllNotOnProject(int projectID){
        String sql = "SELECT u.*, r.id as role_id, r.name as role_name" +
                "        FROM users u" +
                " JOIN roles r ON u.role = r.id"+
                " WHERE u.id NOT IN (" +
                "    SELECT pu.userid" +
                "    FROM userprojects pu" +
                "    WHERE pu.projectid = ?" +
                ")";


        return jdbcTemplate.query(sql, new UserRowMapper(), projectID);
    }

    @Override
    public boolean delete(int id) {
        String sql = "DELETE FROM users WHERE id = ?";
        return jdbcTemplate.update(sql, id) > 0;
    }

    @Override
    @Transactional
    public boolean update(User newUser) throws DatabaseException {

        String sql = "UPDATE users SET name = ?, email = ?, password = ?, role = ? WHERE id = ?";

        int rowsAffected = jdbcTemplate.update(sql,
                newUser.getName(),
                newUser.getEmail(),
                newUser.getPassword(),
                newUser.getRole().getId(),
                newUser.getUserID()
        );

        return rowsAffected > 0;
    }


    @Override
    @Transactional
    public User getByEmail(String email) throws DataAccessException {
        String sql = """
        SELECT u.*, r.id AS role_id, r.name AS role_name
        FROM users u
        JOIN roles r ON u.role = r.id
        WHERE LOWER(u.email) = LOWER(?)
    """;

        List<User> users = jdbcTemplate.query(sql, new UserRowMapper(), email);

        return users.isEmpty() ? null : users.get(0);
    }

@Transactional
@Override
public int getProjectIDOfUsersSubproject(int userID, int subprojectID) {
        String sql = """
        SELECT sp.projectID
        FROM usertasks ut
        JOIN tasks t ON ut.taskID = t.id
        JOIN subprojects sp ON t.subProjectID = sp.id
        WHERE ut.userID = ? AND sp.id = ?
        LIMIT 1
    """;

            Integer result = jdbcTemplate.queryForObject(sql, Integer.class, userID, subprojectID);

            return result != null ? result : 0;

    }



}
