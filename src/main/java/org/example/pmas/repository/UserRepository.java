package org.example.pmas.repository;

import org.example.pmas.exception.DatabaseException;
import org.example.pmas.model.User;

import org.example.pmas.model.rowMapper.UserDTORowMapper;
import org.example.pmas.model.rowMapper.UserRowMapper;
import org.example.pmas.repository.Interfaces.IUserRepository;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.sql.Statement;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

@Repository
public class UserRepository implements IUserRepository {

    private final JdbcTemplate jdbcTemplate;


    public UserRepository(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;

    }


    @Override
    @Transactional
    public User create(User newUser) throws DatabaseException {
        String sql = "INSERT INTO users (name, email, password, role) VALUES (?,?,?,?)";

        //fetches/stores the autogenerated key from the SQL DB
        KeyHolder keyHolder = new GeneratedKeyHolder();

        //updating the DB
        jdbcTemplate.update(connection -> {
            var ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            ps.setString(1, newUser.getName());
            ps.setString(2, newUser.getEmail());
            ps.setString(3, newUser.getPassword());
            ps.setInt(4, newUser.getRole().getId());
            return ps;
        }, keyHolder);

        //checks for a generated key, and if it finds it, sets it to the user we return
        Number key = keyHolder.getKey();
        if (key == null) return null;

        newUser.setUserID(key.intValue());

        return newUser;
    }

    @Override
    @Transactional
    public List<User> readAll() throws DatabaseException {
        String sql = """
                SELECT u.*, r.id as role_id, r.name as role_name
                FROM users u
                JOIN roles r ON u.role = r.id
                """;
        return jdbcTemplate.query(sql, new UserRowMapper());
    }


    @Override
    @Transactional
    public User readSelected(int id) throws DatabaseException {
        String sql = """
                    SELECT u.id, u.name, u.email, u.password, u.picture, 
                    r.id AS role_id, r.name AS role_name
                    FROM users u
                    JOIN roles r ON u.role = r.id
                    WHERE u.id = ?
                """;

        return jdbcTemplate.queryForObject(sql, new UserRowMapper(), id);
    }

    @Transactional
    @Override
    public List<User> getAllOnProject(int projectID) throws DataAccessException {
        String sql = "SELECT u.*, r.id as role_id, r.name as role_name" +
                "        FROM users u" +
                "        JOIN roles r ON u.role = r.id" +
                " JOIN userprojects up ON u.id = up.userid" +
                " WHERE up.projectid = ?";

        return jdbcTemplate.query(sql, new UserRowMapper(), projectID);
    }


    @Override
    @Transactional
    public List<User> getAllNotOnProject(int projectID) throws DataAccessException {
        String sql = "SELECT u.*, r.id as role_id, r.name as role_name" +
                "        FROM users u" +
                " JOIN roles r ON u.role = r.id" +
                " WHERE u.id NOT IN (" +
                "    SELECT pu.userid" +
                "    FROM userprojects pu" +
                "    WHERE pu.projectid = ?" +
                ")";


        return jdbcTemplate.query(sql, new UserRowMapper(), projectID);
    }

    @Transactional
    @Override
    public boolean delete(int id) throws DataAccessException {
        String sql = "DELETE FROM users WHERE id = ?";
        return jdbcTemplate.update(sql, id) > 0;
    }

    @Override
    @Transactional
    public boolean update(User newUser) throws DataAccessException {

        String sql = "UPDATE users SET name = ?, email = ?, password = ?, role = ? WHERE id = ?";

        int rowsAffected = jdbcTemplate.update(sql,
                newUser.getName(),
                newUser.getEmail(),
                newUser.getPassword(),
                newUser.getRole().getId(),
                newUser.getUserID()
        );

        return rowsAffected > 0;
    }


    @Override
    @Transactional
    public User getByEmail(String email) throws DataAccessException {
        String sql = """
                    SELECT u.*, r.id AS role_id, r.name AS role_name
                    FROM users u
                    JOIN roles r ON u.role = r.id
                    WHERE LOWER(u.email) = LOWER(?)
                """;

        List<User> users = jdbcTemplate.query(sql, new UserRowMapper(), email);

        return users.isEmpty() ? null : users.get(0);
    }

    @Transactional
    @Override
    public int getProjectIDOfUsersSubproject(int userID, int subprojectID) throws DataAccessException {
        String sql = """
                    SELECT sp.projectID
                    FROM usertasks ut
                    JOIN tasks t ON ut.taskID = t.id
                    JOIN subprojects sp ON t.subProjectID = sp.id
                    WHERE ut.userID = ? AND sp.id = ?
                    LIMIT 1
                """;

        Integer result = jdbcTemplate.queryForObject(sql, Integer.class, userID, subprojectID);

        return result != null ? result : 0;

    }


    @Transactional
    @Override
    public User readUserWithDetails(int userId) throws DataAccessException {
        String sql = """
                    SELECT
                            u.id AS user_id,
                            u.name AS user_name,
                            u.email,
                            u.password,
                            u.picture,
                
                            r.id AS role_id,
                            r.name AS role_name,
                
                            -- Task data
                            t.id AS task_id,
                            t.name AS task_name,
                            t.description AS description,
                            t.priorityLevel AS priorityLevel,
                            t.timeBudget AS timeBudget,
                            t.timeTaken AS timeTaken,
                            t.completed AS completed,
                            t.deadline AS deadline,
                
                            -- SubProject + Project
                            sp.id AS subproject_id,
                            sp.name AS subproject_name,
                            p.id AS project_id,
                            p.name AS project_name,
                
                            -- User-task relationships
                            GROUP_CONCAT(DISTINCT ut2.userid) AS task_user_ids,
                            GROUP_CONCAT(DISTINCT CONCAT(u2.id, ':', u2.name)) AS task_user_pairs
                
                        FROM users u
                
                        JOIN roles r ON u.role = r.id
                
                        LEFT JOIN usertasks ut ON u.id = ut.userid
                        LEFT JOIN tasks t ON ut.taskid = t.id
                        LEFT JOIN subprojects sp ON t.subprojectID = sp.id
                        LEFT JOIN projects p ON sp.projectID = p.id
                
                        LEFT JOIN usertasks ut2 ON t.id = ut2.taskid
                        LEFT JOIN users u2 ON ut2.userid = u2.id
                
                        WHERE u.id = ?
                
                        GROUP BY
                            u.id,
                            r.id,
                            t.id,
                            sp.id,
                            p.id
                """;


        Map<Integer, User> userMap = new LinkedHashMap<>();
        jdbcTemplate.query(sql, rs -> {
            new UserDTORowMapper(userMap).mapRow(rs, 0);
        }, userId);
        return userMap.values().stream().findFirst().orElse(null);

    }
}



